CREATE PROCEDURE syn.usp_ImportFileCustomerSeasonal
    @ID_Record INT
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @RowCount INT = (SELECT COUNT(*) FROM syn.SA_CustomerSeasonal);
    DECLARE @ErrorMessage VARCHAR(MAX) = '';

    -- Проверка на корректность загрузки
    IF NOT EXISTS (
            SELECT 1
            FROM syn.ImportFile AS f
            WHERE f.ID = @ID_Record
                AND f.FlagLoaded = CAST(1 AS BIT)
        )
    BEGIN
        SET @ErrorMessage = 'Ошибка при загрузке файла, проверьте корректность данных';
        RAISEERROR(@ErrorMessage, 16, 1);
        RETURN;
    END;

    -- Чтение из слоя временных данных
    SELECT
        c.ID AS ID_dbo_Customer,
        cst.ID AS ID_CustomerSystemType,
        s.ID AS ID_Season,
        CAST(cs.DateBegin AS DATE) AS DateBegin,
        CAST(cs.DateEnd AS DATE) AS DateEnd,
        c_dist.ID AS ID_dbo_CustomerDistributor,
        CAST(ISNULL(cs.FlagActive, 0) AS BIT) AS FlagActive
    INTO #CustomerSeasonal
    FROM syn.SA_CustomerSeasonal cs
    JOIN dbo.Customer AS c ON c.UID_DS = cs.UID_DS_Customer
        AND c.ID_mapping_DataSource = 1
    JOIN dbo.Season AS s ON s.Name = cs.Season
    JOIN dbo.Customer AS c_dist ON c_dist.UID_DS = cs.UID_DS_CustomerDistributor
        AND c_dist.ID_mapping_DataSource = 1
    JOIN syn.CustomerSystemType AS cst ON cs.CustomerSystemType = cst.Name
    WHERE TRY_CAST(cs.DateBegin AS DATE) IS NOT NULL
        AND TRY_CAST(cs.DateEnd AS DATE) IS NOT NULL
        AND TRY_CAST(ISNULL(cs.FlagActive, 0) AS BIT) IS NOT NULL;

    -- Определяем некорректные записи
    -- Добавляем причину, по которой запись считается некорректной
    SELECT
        cs.*,
        CASE
            WHEN c.ID IS NULL THEN 'UID клиента отсутствует в справочнике "Клиент"'
            WHEN c_dist.ID IS NULL THEN 'UID дистрибьютора отсутствует в справочнике "Клиент"'
            WHEN s.ID IS NULL THEN 'Сезон отсутствует в справочнике "Сезон"'
            WHEN cst.ID IS NULL THEN 'Тип клиента отсутствует в справочнике "Тип клиента"'
            WHEN TRY_CAST(cs.DateBegin AS DATE) IS NULL THEN 'Невозможно определить Дату начала'
            WHEN TRY_CAST(cs.DateEnd AS DATE) IS NULL THEN 'Невозможно определить Дату окончания'
            WHEN TRY_CAST(ISNULL(cs.FlagActive, 0) AS BIT) IS NULL THEN 'Невозможно определить Активность'
        END AS Reason
    INTO #BadInsertedRows
    FROM syn.SA_CustomerSeasonal AS cs
    LEFT JOIN dbo.Customer AS c ON c.UID_DS = cs.UID_DS_Customer
        AND c.ID_mapping_DataSource = 1
    LEFT JOIN dbo.Customer AS c_dist ON c_dist.UID_DS = cs.UID_DS_CustomerDistributor
        AND c_dist.ID_mapping_DataSource = 1
    LEFT JOIN dbo.Season AS s ON s.Name = cs.Season
    LEFT JOIN syn.CustomerSystemType AS cst ON cst.Name = cs.CustomerSystemType
    WHERE c.ID IS NULL
        OR c_dist.ID IS NULL
        OR s.ID IS NULL
        OR cst.ID IS NULL
        OR TRY_CAST(cs.DateBegin AS DATE) IS NULL
        OR TRY_CAST(cs.DateEnd AS DATE) IS NULL
        OR TRY_CAST(ISNULL(cs.FlagActive, 0) AS BIT) IS NULL;

    -- Обработка данных из файла
    BEGIN TRANSACTION;
    BEGIN TRY
        MERGE INTO syn.CustomerSeasonal AS cs
        USING (
            SELECT
                cs_temp.ID_dbo_Customer,
                cs_temp.ID_CustomerSystemType,
                cs_temp.ID_Season,
                cs_temp.DateBegin,
                cs_temp.DateEnd,
                cs_temp.ID_dbo_CustomerDistributor,
                cs_temp.FlagActive
            FROM #CustomerSeasonal AS cs_temp
        ) AS s ON s.ID_dbo_Customer = cs.ID_dbo_Customer
            AND s.ID_Season = cs.ID_Season
            AND s.DateBegin = cs.DateBegin
        WHEN MATCHED
            AND cs.ID_CustomerSystemType <> s.ID_CustomerSystemType THEN
            UPDATE
            SET ID_CustomerSystemType = s.ID_CustomerSystemType,
                DateEnd = s.DateEnd,
                ID_dbo_CustomerDistributor = s.ID_dbo_CustomerDistributor,
                FlagActive = s.FlagActive
        WHEN NOT MATCHED THEN
            INSERT (ID_dbo_Customer, ID_CustomerSystemType, ID_Season, DateBegin, DateEnd, ID_dbo_CustomerDistributor, FlagActive)
            VALUES (s.ID_dbo_Customer, s.ID_CustomerSystemType, s.ID_Season, s.DateBegin, s.DateEnd, s.ID_dbo_CustomerDistributor, s.FlagActive);

        COMMIT TRANSACTION;

        -- Информационное сообщение
        SET @ErrorMessage = CONCAT('Обработано строк: ', @RowCount);
        RAISEERROR(@ErrorMessage, 0, 1);

        -- Формирование таблицы для отчетности
        SELECT TOP 100
            bir.Season AS 'Сезон',
            bir.UID_DS_Customer AS 'UID Клиента',
            bir.Customer AS 'Клиент',
            bir.CustomerSystemType AS 'Тип клиента',
            bir.UID_DS_CustomerDistributor AS 'UID Дистрибьютора',
            bir.CustomerDistributor AS 'Дистрибьютор',
            ISNULL(FORMAT(TRY_CAST(bir.DateBegin AS DATE), 'dd.MM.yyyy', 'ru-RU'), bir.DateBegin) AS 'Дата начала',
            ISNULL(FORMAT(TRY_CAST(bir.DateEnd AS DATE), 'dd.MM.yyyy', 'ru-RU'), bir.DateEnd) AS 'Дата окончания',
            bir.FlagActive AS 'Активность',
            bir.Reason AS 'Причина'
        FROM #BadInsertedRows AS bir;

        RETURN;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(MAX) = ERROR_MESSAGE();
        RAISEERROR(@ErrorMessage, 16, 1);
        RETURN;
    END CATCH;
END
